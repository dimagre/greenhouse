esphome:
  name: esphome-web-91948c
  friendly_name: GreenHouse D1
  on_boot:
    priority: -100
    then:
      - fan.turn_on:
          id: greenhouse_fan
          speed: 20

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "aXIrMfdCEMtp/WAkcYACN4EcYVoL1WaBLepZ+JYlD1g="

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-91948C"
    password: "gVZKyx9IafaN"

captive_portal:

sensor:
# wifi strenght sensor
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: s_wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: s_wifi_signal_db
    name: "WiFi Signal Percent"
    id: s_wifi_signal_percent  # Assign an id to the percent sensor
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: "diagnostic"

  - platform: sht3xd
    temperature:
      name: "Temperature"
      id: greenhouse_temp
    humidity:
      name: "Humidity"
      id: greenhouse_hum
    address: 0x44
    update_interval: 5s

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: true
  id: bus_a

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto Mono@400"
    id: roboto
    size: 16

  - file: "PixCyrillic.ttf"
    id: vcr
    size: 16
  - file: "PixCyrillic.ttf"
    id: vcr_big
    size: 20  
image:
  - file: mdi:wifi
    id: img_wifi
    resize: 20x20
  - file: mdi:wifi-off
    id: img_wifi_off
    resize: 20x20
  - file: mdi:thermometer
    id: img_temp
    resize: 20x20
  - file: mdi:water-percent
    id: img_hum
    resize: 20x20
  - file: mdi:fan
    id: img_fan
    resize: 20x20
  - file: mdi:fan-off
    id: img_fan_off
    resize: 20x20

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3D
    lambda: |-  
      // Line 1: Title, centered
      it.printf(64, 0, id(vcr), TextAlign::CENTER_HORIZONTAL, "Greenhouse");

      it.printf(20, 38, id(roboto), "%.1f", id(greenhouse_temp).state);
      it.image(0, 38, id(img_temp)); 
      it.printf(84, 38, id(roboto), "%.1f", id(greenhouse_hum).state);
      it.image(64, 38, id(img_hum));  


      // Line 2: WiFi status in %
      if (id(s_wifi_signal_percent).state > 0.0) {
        it.printf(16, 16, id(roboto), " %.0f", id(s_wifi_signal_percent).state);
        it.image(0, 16, id(img_wifi));
      } else {
        it.image(0, 16, id(img_wifi_off));
      }

      // Line 3: Fan status
      if(id(greenhouse_fan).state) {
        it.printf(84, 16, id(roboto), "%d", int(id(greenhouse_fan).speed));
        it.image(64, 16, id(img_fan));
      } else {
         it.image(64, 16, id(img_fan_off));
      }

      
output:
  platform: esp8266_pwm
  pin: GPIO2
  frequency: 5000 Hz
  id: pwm_output

fan:
  platform: speed
  output: pwm_output
  name: "Fan"
  id: greenhouse_fan # adding an id for the fan
  restore_mode: RESTORE_DEFAULT_OFF